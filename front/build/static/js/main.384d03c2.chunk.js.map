{"version":3,"sources":["utils/getMatchesFromArray.js","utils/fetchUrl.js","components/App.js","index.js"],"names":["comparingFunction","valueOfArrayToCompare","comparingElement","_i","comparingElement_1","length","module","exports","getIndexesOfMatches","arrayToCompare","arrayContainingMatches","elementToFind","toDelete","element","indexOfMatch","push","fetch","require","fetchUrl","URL","a","method","body","options","headers","payload","JSON","stringify","response","json","App","props","websockets","socket","io","connect","server","reconnection","secure","on","console","log","err","data","delOneFromStat","update","point","_id","targets","pointer","state","hits","aboutToBeDeleted","splice","parseInt","setState","fill","APIDEL","API","deleteChar","event","id","target","value","req","this","then","items","className","onClick","map","hit","key","src","imageURL","alt","for","name","description","Component","render","document","getElementById"],"mappings":"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","file":"static/js/main.384d03c2.chunk.js","sourcesContent":["\n/**\n * @      This class exposes a function that takes 3 elements as parameters.\n *        The first one is an array of objects that have elements that contains\n *        elements with values that you dont want and you need to change them or\n *        just to punish and desintegrate that entire element of the array.\n *        The second is an array with elements that matchs with something specific\n *        in the objects contained in the first array like a name or number.\n *        and the third element refers to the object element where you are gonna\n *        look in to.\n *\n */\n        /**\n         * @function\n         * @param {Any} valueOfArrayToCompare Value of of the array that is gonna be compared\n         * @param {Array} comparingElement    Array containing the guilty elements who are gonna be looked for\n         * @return {boolean}                  Returns true when it finds a any guilty in the element given\n         */\n        const comparingFunction = function (valueOfArrayToCompare, comparingElement) {\n            for (var _i = 0, comparingElement_1 = comparingElement; _i < comparingElement_1.length; _i++) {\n                var index = comparingElement_1[_i];\n                if (valueOfArrayToCompare === index) {\n                    return true;\n                }\n            }\n        };\n        /**\n         * @function\n         * @param {Array} arrayToCompare         This is an array with objects that contains elements that you dont want\n         *                                       and obviously you are gonna look for to punish them\n         * @param {Array} arrayContainingMatches Array containing the guilty elements who are gonna be looked for\n         * @param {Any} elementToFind            This variable refers to the field of the object that is gonna be inspected\n         */\n        const getIndexesOfMatches = function (arrayToCompare, arrayContainingMatches, elementToFind) {\n            var toDelete = [];\n            var element = elementToFind;\n            for (var indexOfMatch in arrayToCompare) {\n                if (comparingFunction(arrayToCompare[indexOfMatch][element], arrayContainingMatches)) {\n                    toDelete.push(indexOfMatch);\n                }\n            }\n            return toDelete;\n        };\n    \n\nmodule.exports.getIndexesOfMatches = getIndexesOfMatches;\n","\nconst fetch = require('node-fetch');\n\nconst fetchUrl = async (URL, method = null, body = null ) => {\n    let options;\n    if(method == null){\n        options = {\n            method:`get`,\n            headers: { 'Content-Type': 'application/json' }\n        }\n    }\n    else{\n        let payload = JSON.stringify(body)\n        options = {\n            method: `${method}`,\n            body: payload,\n            headers: { 'Content-Type': 'application/json' }\n        }\n    }\n    const response = await fetch(URL, options)\n    return response.json();\n}\n\nexport default fetchUrl;","\nimport fetchUrl from '../utils/fetchUrl';\nimport React, { Component } from 'react';\nimport pointer from '../utils/getMatchesFromArray';\nimport io from 'socket.io-client';\n\n// var server = process.env.SERVER;\n// var API = process.env.API;\n// var APIDEL = process.env.APIDEL;\n\n \n\n// API=http://api:8001/characters/all\n// APIDEL=http://api:8001/characters'\n// SERVER=http://api:8001\n\n\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.state = {\n        hits: [],\n      };\n    this.websockets();\n    this.server ='http://localhost:8001/characters/all'\n    this.API = 'http://localhost:8001/characters'\n    this.APIDEL ='http://localhost:8001'\n    };\n\n    websockets = () => {\n    const socket = io.connect(this.server, {\n        reconnection: true,\n        secure: false\n        });\n    socket.on('connect', () => {\n        console.log(\"Connection Succesfull\")\n        });\n        \n    socket.on('connect_error', (err) => {\n            console.log(`Conexion error. With the error ${err}`);\n        });\n    \n    socket.on('reconnect', () => {\n        console.log(`Attempting to reconnect`)\n    });\n    \n    socket.on('disconnect', () => {\n        console.log(`Client disconnected`)\n    })\n    \n    socket.on('characterDeleted', (data) => {\n        this.delOneFromStat(data)\n    });\n    socket.on('fill', async () => {\n        console.log(\"revieving update\")\n        await this.update();\n        console.log(\"done\")\n    });\n    \n}\n\n    delOneFromStat = async (data) => {\n        let point = data._id;\n        point = [point];\n        const targets = pointer.getIndexesOfMatches(this.state.hits, point, \"_id\"); \n        let aboutToBeDeleted = this.state.hits;\n        aboutToBeDeleted.splice(parseInt(targets[0],10),1);\n        this.setState(aboutToBeDeleted); \n    }\n\n\n    fill = async () => {\n        await fetchUrl(this.APIDEL)\n       \n    }\n\n    update = async () => {\n        const data = await fetchUrl(this.API)\n        this.setState({ hits: data});\n        }\n    \n    \n    deleteChar = async event => {\n        const id = event.target.value;\n        const req = {\"_id\": id}\n        fetchUrl(this.APIDEL,'DELETE',req);\n        \n    }\n\n    componentDidMount() {\n    fetchUrl(this.API)\n        .then(data => this.setState({ hits: data}));\n    }\n\n    render() {\n        const items = this.state.hits;\n        return (\n            <div>\n            <button className=\"btn-fill\" onClick={this.fill}>Fill with heroes</button>\n            {items.map(hit =>\n                <ul key={hit._id}>\n                    <img src={hit.imageURL} alt=\"not found\"></img>\n\n                    <label for=\"c-name\"> Name :</label>\n                    <span id=\"c-name\" > {hit.name}</span><br></br>\n\n                    <label for=\"c-desc\">Description: </label>\n                    \n                    <span id=\"c-desc\"> {hit.description}</span><br></br>\n\n                    <button className='btn-delete' onClick={this.deleteChar} value={hit._id}>Delete</button>\n                \n                </ul>\n            )}\n        </div>\n        );\n        }\n    }\n\nexport default App;","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/App';\n\nrender(\n    <div>\n        <App />\n    </div>\n    , document.getElementById('root')\n    );"],"sourceRoot":""}